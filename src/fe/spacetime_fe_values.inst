// ---------------------------------------------------------------------
//
// Copyright (C) 2022 - 2023 by the ideal.II authors
//
// This file is part of the ideal.II library.
//
// The ideal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of ideal.II.
//
// ---------------------------------------------------------------------

#ifndef __IDEAL_II_FE_SPACETIME_FE_VALUES_inst
#define __IDEAL_II_FE_SPACETIME_FE_VALUES_inst

namespace idealii::spacetime
{
    template class FEValues<2> ;
    template class FEValues<3> ;


    template void FEValues<2>::get_function_values(const dealii::Vector<double>&,
                                                   std::vector<dealii::Vector<double>>&) const;

    template void FEValues<3>::get_function_values(const dealii::Vector<double> &,
                                                   std::vector<dealii::Vector<double>> &) const;

    template void FEValues<2>::get_function_dt(const dealii::Vector<double>&,
                                                   std::vector<dealii::Vector<double>>&) const;

    template void FEValues<3>::get_function_dt(const dealii::Vector<double> &,
                                                   std::vector<dealii::Vector<double>> &) const;

    template void FEValues<2>::get_function_space_gradients(const dealii::Vector<double>&,
                                                   std::vector<std::vector<dealii::Tensor<1,2,double>>>&) const;

    template void FEValues<3>::get_function_space_gradients(const dealii::Vector<double> &,
                                                   std::vector<std::vector<dealii::Tensor<1,3,double>>>&) const;

    #ifdef DEAL_II_WITH_TRILINOS
    #ifdef DEAL_II_WITH_MPI
    template void FEValues<2>::get_function_values(const dealii::TrilinosWrappers::MPI::Vector&,
                                                   std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;

    template void FEValues<3>::get_function_values(const dealii::TrilinosWrappers::MPI::Vector&,
                                                   std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;

    template void FEValues<2>::get_function_dt(const dealii::TrilinosWrappers::MPI::Vector&,
                                               std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;

    template void FEValues<3>::get_function_dt(const dealii::TrilinosWrappers::MPI::Vector&,
                                               std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;


    template void FEValues<2>::get_function_space_gradients(
        const dealii::TrilinosWrappers::MPI::Vector&,
        std::vector<std::vector<dealii::Tensor<1,2,dealii::TrilinosScalar>>>&
    ) const;

    template void FEValues<3>::get_function_space_gradients(
        const dealii::TrilinosWrappers::MPI::Vector&,
        std::vector<std::vector<dealii::Tensor<1,3,dealii::TrilinosScalar>>>&
    ) const;

    #endif
    #endif

    template class FEJumpValues<2> ;
    template class FEJumpValues<3> ;


    template void FEJumpValues<2>::get_function_values_plus(const dealii::Vector<double>&,
                                                        std::vector<dealii::Vector<double>>&) const;

    template void FEJumpValues<2>::get_function_values_minus(const dealii::Vector<double>&,
                                                         std::vector<dealii::Vector<double>>&) const;

    template void FEJumpValues<3>::get_function_values_plus(const dealii::Vector<double> &,
                                                        std::vector<dealii::Vector<double>> &) const;

    template void FEJumpValues<3>::get_function_values_minus(const dealii::Vector<double> &,
                                                         std::vector<dealii::Vector<double>> &) const;

#ifdef DEAL_II_WITH_TRILINOS
#ifdef DEAL_II_WITH_MPI
    template void FEJumpValues<2>::get_function_values_plus(const dealii::TrilinosWrappers::MPI::Vector&,
                                                        std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;

    template void FEJumpValues<2>::get_function_values_minus(const dealii::TrilinosWrappers::MPI::Vector&,
                                                         std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;

    template void FEJumpValues<3>::get_function_values_plus(const dealii::TrilinosWrappers::MPI::Vector&,
                                                        std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;

    template void FEJumpValues<3>::get_function_values_minus(const dealii::TrilinosWrappers::MPI::Vector&,
                                                         std::vector<dealii::Vector<dealii::TrilinosScalar>>&) const;


#endif
#endif

    template class FEFaceValues<2> ;
    template class FEFaceValues<3> ;
}

#endif
